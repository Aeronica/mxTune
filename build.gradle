buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'idea'
apply plugin: 'maven-publish'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

// Using shade at the moment, but it does not allow remapping the shaded classes to another path like FG 2.
// Can't use the shadow plugin because it can't deal with the transitive runtime junk from forge.
// So that means there is a potential for class conflicts unless I write my own MML lexer/parser.
configurations {
    shade {}
    compile.extendsFrom(shade)
    compileOnly.extendsFrom minecraft
}

ext.buildProperties = file "build.properties"

buildProperties.withReader {
    def properties = new Properties()
    properties.load(it)
    ext.config = new ConfigSlurper().parse properties
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "modmaven.k-4u.nl"
    }
}

version = "${config.modVersionMajor}.${config.modVersionMinor}.${config.modVersionRev}"
group = "net.aeronica.mods.mxtune"
archivesBaseName = "mxtune-${config.minecraftVersion}"

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: "${config.forgeMappings}-${config.minecraftVersion}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            ideaModule "${project.name}.main"

            mods {
                mxtune {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            ideaModule "${project.name}.main"

            mods {
                mxtune {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'fourteen', '--all', '--output', file('src/generated/resources/')

            mods {
                mxtune {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${config.minecraftVersion}-${config.forgeVersion}"

    compile 'org.antlr:antlr4-runtime:4.7.2' // use ANTLR version 4
    shade 'org.antlr:antlr4-runtime:4.7.2' // use ANTLR version 4
    // compile against the JEI API but do not include it at runtime
    //compileOnly  fg.deobf("mezz.jei:jei_${config.minecraftVersion}:${config.jeiVersion}:api")
    // at runtime, use the full JEI jar
    //runtimeOnly  fg.deobf("mezz.jei:jei_${config.minecraftVersion}:${config.jeiVersion}")
}


jar {
    manifest {
        attributes([
                "Specification-Title": "mxtune",
                "Specification-Vendor": "aeronica",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"aeronica",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

processResources {
    // Exclude the GIMP image files
    exclude '**/*.xcf'

    // Exclude the Cubik model files
    exclude '**/*.bdc3D'

    // Exclude the Paint.NET image files
    exclude '**/*.pdn'

    eachFile {
        println "Processing: $it.name"
        if (it.relativePath.segments[0] in ['META-INF'])
            expand project.properties
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            artifact reobfArtifact
//        }
//    }
//    repositories {
//        maven {
//            url "file:///${project.projectDir}/mcmodsrepo"
//        }
//    }
//}


//sonarqube {
//    properties {
//        property "sonar.projectName", "mxTune"
//        property "sonar.host.url", "https://sonarcloud.io"
//        property "sonar.branch.name", "${config.projectBranch}"
//        property "sonar.coverage.exclusions", "**/*"
//    }
//}
//
//task signJar(type: SignJar, dependsOn: reobfJar) {
//    onlyIf {
//        project.hasProperty("keyStore")
//    }
//
//    keyStore = project.findProperty('keyStore')
//    alias = project.findProperty('keyStoreAlias')
//    storePass = project.findProperty('keyStorePass')
//    keyPass = project.findProperty('keyStoreKeyPass')
//    inputFile = jar.archivePath
//    outputFile = jar.archivePath
//}
//
//build {
//    dependsOn signJar
//}

task updateMappings() {

    def remapped = file('src_remapped/main/java/net/aeronica/mods/mxtune')
    def methods = file('methods.csv')
    def fields = file('fields.csv')
    def source = relativeProjectPath('src/main/java/net/aeronica/mods/mxtune')

    doLast {

        Map<String, String> map = new HashMap<>()
        methods.eachLine {line ->
            String[] pts = line.split(",")
            map.put(pts[0], pts[1])
        }
        fields.eachLine {line ->
            String[] pts = line.split(",")
            map.put(pts[0], pts[1])
        }

        copy {
            from source
            into remapped
            include '**/*.java'

            filter { javaLine ->
                map.entrySet().each { entry ->
                    javaLine = javaLine.replace(entry.getKey(), entry.getValue())
                }
                return javaLine
            }

            includeEmptyDirs = false
            eachFile { println "Processing: $it.name" }
        }
    }
}